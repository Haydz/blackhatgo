package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strings"
)

//Structure  to allow referencing individual children
// JSON format
type Results struct {
	Id int
	//Command string
	Output string
}

// Check Operating System
func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {
	// fmt.Println(OSCheck())

	var results string
	request := bufio.NewReader(os.Stdin)
	fmt.Print("Text to send: ")
	command, _ := request.ReadString('\n')

	// popssible client code once receing command
	checkOS := OSCheck() // when executed check if windows or linx TODO: figure out how to run from client and send to parent?? needed?
	//executing command based on operating system
	if checkOS == "windows" {
		fmt.Println("WINDOWS")
		CommandExec, err := exec.Command("cmd", "/C", command).Output()
		if err != nil {
			fmt.Println("Error executing command", err)
		}
		CommandExec2 := string(CommandExec)
		results = strings.TrimSpace(CommandExec2)
		// fmt.Println(reflect.TypeOf(CommandExec))
		// fmt.Println(reflect.TypeOf(err))

	} else if checkOS == "linux" {
		fmt.Println("LINUX")
		fmt.Println("XS", command)
		CommandExec, err := exec.Command(strings.TrimSpace(command)).Output()
		if err != nil {
			fmt.Println("Error executing command", err)
		}
		CommandExec2 := string(CommandExec) // need for commands on linux - remove \r\n
		results = strings.TrimSpace(CommandExec2)
	}
	fmt.Println("results:", results)

	//using the Results structure
	outputTest := &Results{
		Id:     1, // TODO: need to make this random for multiple children
		Output: results,
	}

	//how to marshal data for sending
	jsonTest, _ := json.Marshal(outputTest)
	fmt.Println(string(jsonTest))

	//How to unmarshal data once received.
	var unmarshalTest Results
	json.Unmarshal(jsonTest, &unmarshalTest)
	fmt.Println("data once unmarshalled... ID: ", unmarshalTest.Id)
	fmt.Println("Data received:", unmarshalTest.Output)

}
