package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net"
	"os"
	"strings"
)

type Results struct {
	ID int
	//Command string
	Output string
}

func main() {

	// arguments := os.Args
	// if len(arguments) == 1 {
	// 	fmt.Println("Please provide port number")
	// 	return
	// }

	PORT := "127.0.0.1:9999"
	l, err := net.Listen("tcp", PORT)
	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println("===ADMIN SERVER LISTENING ===")
	defer l.Close()

	c, err := l.Accept()
	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println("PARENT CONNECTED")

	for {
		// PORT := ":" + arguments[1]

		reader := bufio.NewReader(os.Stdin)
		fmt.Print(">> ")
		text, _ := reader.ReadString('\n')
		fmt.Fprintf(c, text+"\n")

		// if STOp is typed
		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Fprintf(c, text+"\n")
			fmt.Println("Closing TCP server!")

			return
		}

		var outputTest Results
		decoder := json.NewDecoder(c)

		decoder.Decode(&outputTest)
		// json.Unmarshal(buf[:len], &unmarshalTest)
		// fmt.Println("->", s)
		//fmt.Println("len", binary.Size(buf))
		// fmt.Println("ID->", unmarshalTest.Id)
		// fmt.Println(outputTest)
		fmt.Println("===Results===")
		fmt.Println(outputTest.ID, outputTest.Output)

	}

}
