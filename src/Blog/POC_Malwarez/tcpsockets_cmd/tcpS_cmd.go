package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"strings"
)

func main() {
	arguments := os.Args
	if len(arguments) == 1 {
		fmt.Println("Please provide port number")
		return
	}

	PORT := ":" + arguments[1]
	l, err := net.Listen("tcp", PORT)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer l.Close()

	c, err := l.Accept()
	if err != nil {
		fmt.Println(err)
		return
	}

	for {
		reader := bufio.NewReader(os.Stdin)
		fmt.Print(">> ")
		text, _ := reader.ReadString('\n')
		fmt.Fprintf(c, text+"\n")

		// if STOp is typed
		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("Closing TCP server!")
			return
		}

		//reading

		// netData := bufio.NewReader(c)
		// for {
		// 	b, err := netData.ReadByte()
		// 	if err != nil {
		// 		break
		// 	}
		// 	fmt.Println(b) // do stuff
		// }
		// netData, err := ioutil.ReadAll(c)

		// if err != nil {
		// 	fmt.Println(err)
		// 	return
		// }
		// scanner := bufio.NewScanner(c)
		// test := scanner.Scan()
		// for test != scanner.EOF {
		// 	fmt.Println(scanner.Text())
		// }
		// for scanner.Scan() {
		// 	fmt.Println(scanner.Text())
		// 	line := scanner.Text()
		// 	if line == "END" {
		// 		break
		// 	}
		// }
		// fmt.Println("finished scanning")
		// fmt.Print("-> ", string(netData))

		buf := make([]byte, 4096)

		len, err := c.Read(buf)

		if err != nil {
			fmt.Println("Error reading:", err.Error())
			break
		}

		s := string(buf[:len])

		fmt.Println("->", s)
		//fmt.Println("len", binary.Size(buf))

	}

}
