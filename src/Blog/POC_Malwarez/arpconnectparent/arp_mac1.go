package main

import (
	"fmt"
	"log"
	"net"
	"time"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
)

var (
	device       string = "\\Device\\NPF_{6D64678B-2267-4669-938F-1243F92A1F64}"
	snapshot_len int32  = 1024
	promiscuous  bool   = false
	err          error
	timeout      time.Duration = 30 * time.Second
	handle       *pcap.Handle
	buffer       gopacket.SerializeBuffer
	// options      gopacket.SerializeOptions
)

func main() {
	// ifaces, err := net.Interfaces()
	if err != nil {
		fmt.Print(fmt.Errorf("localAddresses: %+v\n", err.Error()))
		return
	}
	// fmt.Println(ifaces)
	// Open device
	handle, err = pcap.OpenLive(device, snapshot_len, promiscuous, timeout)
	if err != nil {
		log.Fatal(err)
	}
	defer handle.Close()

	// Send raw bytes over wire
	rawBytes := []byte{10, 20, 30}
	err = handle.WritePacketData(rawBytes)
	if err != nil {
		log.Fatal(err)
	}

	// This time lets fill out some information
	ipLayer := layers.IPv4{
		SrcIP: net.IP{192, 168, 50, 209},
		DstIP: net.IP{192, 168, 50, 5},
	}
	arpLayer := layers.ARP{
		AddrType:        layers.LinkTypeEthernet,
		Protocol:        layers.EthernetTypeIPv4,
		HwAddressSize:   6,
		ProtAddressSize: 4,
		Operation:       layers.ARPRequest,
		SourceHwAddress: net.HardwareAddr{0xAA, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB},
		// SourceHwAddress:   []byte(iface.HardwareAddr),
		SourceProtAddress: []byte(net.IP{192, 168, 50, 209}),
		// DstHwAddress:      []byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
	}
	ethernetLayer := layers.Ethernet{
		SrcMAC:       net.HardwareAddr{0xAA, 0xAA, 0xAA, 0xAA, 0xBB, 0xBB},
		DstMAC:       net.HardwareAddr{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // for arp broadcast
		EthernetType: layers.EthernetTypeARP,
	}
	options := gopacket.SerializeOptions{
		FixLengths:       true,
		ComputeChecksums: true,
	}
	// tcpLayer := &layers.TCP{
	// 	SrcPort: layers.TCPPort(9999),
	// 	DstPort: layers.TCPPort(9999),
	// }
	// And create the packet with the layers
	buffer = gopacket.NewSerializeBuffer()
	gopacket.SerializeLayers(buffer, options,
		&ethernetLayer,
		&ipLayer,
		// tcpLayer,
		&arpLayer,
		gopacket.Payload(rawBytes),
	)
	fmt.Println("sending traffic")
	outgoingPacket := buffer.Bytes()
	fmt.Println(outgoingPacket)
	// outgoingPacket := buffer.Bytes()
	// Send our packet

	for x := 1; x < 20; x++ {
		fmt.Println("Sending Packet")
		err = handle.WritePacketData(outgoingPacket)
		if err != nil {
			log.Fatal(err)
		}
	}
}
