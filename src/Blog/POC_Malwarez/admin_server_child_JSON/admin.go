package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"net"
	"os"
	"strings"
)

type Results struct {
	ID int
	//Command string
	Output string
}

func main() {
	arguments := os.Args
	if len(arguments) == 1 {
		fmt.Println("Please provide port number")
		return
	}

	PORT := ":" + arguments[1]
	l, err := net.Listen("tcp", PORT)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer l.Close()

	c, err := l.Accept()
	if err != nil {
		fmt.Println(err)
		return
	}
	defer c.Close()
	for {
		reader := bufio.NewReader(os.Stdin)
		fmt.Print(">> ")
		text, _ := reader.ReadString('\n')
		fmt.Fprintf(c, text+"\n")

		// if STOp is typed
		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("Closing TCP server!")
			return
		}

		//create byte slices
		//https://golang.org/pkg/bytes/

		// buf := make([]byte, 4096)
		// buf, err := bufio.NewReader(c).ReadString('\n')
		// len, err := c.Read(buf)

		// if err != nil {
		// 	fmt.Println("Error reading:", err.Error())
		// 	break
		// }

		var outputTest Results
		decoder := json.NewDecoder(c)
		// s := string(buf[:len])
		decoder.Decode(&outputTest)
		// json.Unmarshal(buf[:len], &unmarshalTest)
		// fmt.Println("->", s)
		//fmt.Println("len", binary.Size(buf))
		// fmt.Println("ID->", unmarshalTest.Id)
		fmt.Println(outputTest)
		fmt.Println(outputTest.ID, outputTest.Output)

	}

}
